/* tslint:disable */
/* eslint-disable */
/**
 * ODIN Fleet API
 * API to access Odin Fleet, empowering developers to deploy gameservers all around the world in just a few lines of code.
 *
 * The version of the OpenAPI document: 0.8.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { Placement } from './placement';
import {
    PlacementFromJSON,
    PlacementFromJSONTyped,
    PlacementToJSON,
} from './placement';

/**
 * 
 * @export
 * @interface CreateAppLocationSettingRequest
 */
export interface CreateAppLocationSettingRequest {
    /**
     * The name of the location setting
     * @type {string}
     * @memberof CreateAppLocationSettingRequest
     */
    name: string;
    /**
     * The id of the server configuration that should be deployed
     * @type {number}
     * @memberof CreateAppLocationSettingRequest
     */
    serverConfigId: number;
    /**
     * Whether auto scaler is enabled
     * @type {boolean}
     * @memberof CreateAppLocationSettingRequest
     */
    autoScalerEnabled: boolean;
    /**
     * The minimum number of instances that should run at the specific location
     * @type {number}
     * @memberof CreateAppLocationSettingRequest
     */
    autoScalerMin?: number | null;
    /**
     * The maximum number of instances that should run at the specific location
     * @type {number}
     * @memberof CreateAppLocationSettingRequest
     */
    autoScalerMax?: number | null;
    /**
     * The number of instances that should run at the specific location
     * @type {number}
     * @memberof CreateAppLocationSettingRequest
     */
    numInstances: number;
    /**
     * The placement settings that define the location and other constraints
     * @type {Placement}
     * @memberof CreateAppLocationSettingRequest
     */
    placement?: Placement;
}

/**
 * Check if a given object implements the CreateAppLocationSettingRequest interface.
 */
export function instanceOfCreateAppLocationSettingRequest(value: object): value is CreateAppLocationSettingRequest {
    if (!('name' in value) || value['name'] === undefined) return false;
    if (!('serverConfigId' in value) || value['serverConfigId'] === undefined) return false;
    if (!('autoScalerEnabled' in value) || value['autoScalerEnabled'] === undefined) return false;
    if (!('numInstances' in value) || value['numInstances'] === undefined) return false;
    return true;
}

export function CreateAppLocationSettingRequestFromJSON(json: any): CreateAppLocationSettingRequest {
    return CreateAppLocationSettingRequestFromJSONTyped(json, false);
}

export function CreateAppLocationSettingRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): CreateAppLocationSettingRequest {
    if (json == null) {
        return json;
    }
    return {
        
        'name': json['name'],
        'serverConfigId': json['serverConfigId'],
        'autoScalerEnabled': json['autoScalerEnabled'],
        'autoScalerMin': json['autoScalerMin'] == null ? undefined : json['autoScalerMin'],
        'autoScalerMax': json['autoScalerMax'] == null ? undefined : json['autoScalerMax'],
        'numInstances': json['numInstances'],
        'placement': json['placement'] == null ? undefined : PlacementFromJSON(json['placement']),
    };
}

export function CreateAppLocationSettingRequestToJSON(value?: CreateAppLocationSettingRequest | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'name': value['name'],
        'serverConfigId': value['serverConfigId'],
        'autoScalerEnabled': value['autoScalerEnabled'],
        'autoScalerMin': value['autoScalerMin'],
        'autoScalerMax': value['autoScalerMax'],
        'numInstances': value['numInstances'],
        'placement': PlacementToJSON(value['placement']),
    };
}

