/* tslint:disable */
/* eslint-disable */
/**
 * ODIN Fleet API
 * API to access Odin Fleet, empowering developers to deploy gameservers all around the world in just a few lines of code.
 *
 * The version of the OpenAPI document: 0.8.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { OperatingSystem } from './operating-system';
import {
    OperatingSystemFromJSON,
    OperatingSystemFromJSONTyped,
    OperatingSystemToJSON,
} from './operating-system';
import type { BinaryType } from './binary-type';
import {
    BinaryTypeFromJSON,
    BinaryTypeFromJSONTyped,
    BinaryTypeToJSON,
} from './binary-type';
import type { ZipFile } from './zip-file';
import {
    ZipFileFromJSON,
    ZipFileFromJSONTyped,
    ZipFileToJSON,
} from './zip-file';
import type { Steam } from './steam';
import {
    SteamFromJSON,
    SteamFromJSONTyped,
    SteamToJSON,
} from './steam';
import type { DockerImage } from './docker-image';
import {
    DockerImageFromJSON,
    DockerImageFromJSONTyped,
    DockerImageToJSON,
} from './docker-image';
import type { DockerCompose } from './docker-compose';
import {
    DockerComposeFromJSON,
    DockerComposeFromJSONTyped,
    DockerComposeToJSON,
} from './docker-compose';

/**
 * 
 * @export
 * @interface CreateBinaryRequest
 */
export interface CreateBinaryRequest {
    /**
     * The name of the binary
     * @type {string}
     * @memberof CreateBinaryRequest
     */
    name: string;
    /**
     * The version of the binary
     * @type {string}
     * @memberof CreateBinaryRequest
     */
    version: string;
    /**
     * The type of the binary
     * @type {BinaryType}
     * @memberof CreateBinaryRequest
     */
    type: BinaryType;
    /**
     * The operating system of the binary
     * @type {OperatingSystem}
     * @memberof CreateBinaryRequest
     */
    os: OperatingSystem;
    /**
     * The docker compose settings
     * @type {DockerCompose}
     * @memberof CreateBinaryRequest
     */
    dockerCompose?: DockerCompose;
    /**
     * The zip file settings
     * @type {ZipFile}
     * @memberof CreateBinaryRequest
     */
    zipFile?: ZipFile;
    /**
     * The steam settings
     * @type {Steam}
     * @memberof CreateBinaryRequest
     */
    steam?: Steam;
    /**
     * The docker image settings
     * @type {DockerImage}
     * @memberof CreateBinaryRequest
     */
    dockerImage?: DockerImage;
}

/**
 * Check if a given object implements the CreateBinaryRequest interface.
 */
export function instanceOfCreateBinaryRequest(value: object): value is CreateBinaryRequest {
    if (!('name' in value) || value['name'] === undefined) return false;
    if (!('version' in value) || value['version'] === undefined) return false;
    if (!('type' in value) || value['type'] === undefined) return false;
    if (!('os' in value) || value['os'] === undefined) return false;
    return true;
}

export function CreateBinaryRequestFromJSON(json: any): CreateBinaryRequest {
    return CreateBinaryRequestFromJSONTyped(json, false);
}

export function CreateBinaryRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): CreateBinaryRequest {
    if (json == null) {
        return json;
    }
    return {
        
        'name': json['name'],
        'version': json['version'],
        'type': BinaryTypeFromJSON(json['type']),
        'os': OperatingSystemFromJSON(json['os']),
        'dockerCompose': json['dockerCompose'] == null ? undefined : DockerComposeFromJSON(json['dockerCompose']),
        'zipFile': json['zipFile'] == null ? undefined : ZipFileFromJSON(json['zipFile']),
        'steam': json['steam'] == null ? undefined : SteamFromJSON(json['steam']),
        'dockerImage': json['dockerImage'] == null ? undefined : DockerImageFromJSON(json['dockerImage']),
    };
}

export function CreateBinaryRequestToJSON(value?: CreateBinaryRequest | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'name': value['name'],
        'version': value['version'],
        'type': BinaryTypeToJSON(value['type']),
        'os': OperatingSystemToJSON(value['os']),
        'dockerCompose': DockerComposeToJSON(value['dockerCompose']),
        'zipFile': ZipFileToJSON(value['zipFile']),
        'steam': SteamToJSON(value['steam']),
        'dockerImage': DockerImageToJSON(value['dockerImage']),
    };
}

