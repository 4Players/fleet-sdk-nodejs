/* tslint:disable */
/* eslint-disable */
/**
 * ODIN Fleet API
 * API to access Odin Fleet, empowering developers to deploy gameservers all around the world in just a few lines of code.
 *
 * The version of the OpenAPI document: 0.8.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { ServerConfig } from './server-config';
import {
    ServerConfigFromJSON,
    ServerConfigFromJSONTyped,
    ServerConfigToJSON,
} from './server-config';
import type { Placement } from './placement';
import {
    PlacementFromJSON,
    PlacementFromJSONTyped,
    PlacementToJSON,
} from './placement';

/**
 * 
 * @export
 * @interface AppLocationSetting
 */
export interface AppLocationSetting {
    /**
     * The id of the app location setting
     * @type {number}
     * @memberof AppLocationSetting
     */
    id: number;
    /**
     * The name of the app location setting
     * @type {string}
     * @memberof AppLocationSetting
     */
    name: string;
    /**
     * The app id of the app location setting
     * @type {number}
     * @memberof AppLocationSetting
     */
    appId: number;
    /**
     * The server config id of the app location setting
     * @type {number}
     * @memberof AppLocationSetting
     */
    serverConfigId: number;
    /**
     * The number of instances that should run at the specific location
     * @type {number}
     * @memberof AppLocationSetting
     */
    numInstances: number;
    /**
     * Whether the auto scaler is enabled
     * @type {boolean}
     * @memberof AppLocationSetting
     */
    autoScalerEnabled: boolean;
    /**
     * The minimum number of instances that should run at the specific location
     * @type {number}
     * @memberof AppLocationSetting
     */
    autoScalerMin?: number;
    /**
     * The maximum number of instances that should run at the specific location
     * @type {number}
     * @memberof AppLocationSetting
     */
    autoScalerMax?: number;
    /**
     * The placement to use
     * @type {Placement}
     * @memberof AppLocationSetting
     */
    placement: Placement;
    /**
     * The server config to use
     * @type {ServerConfig}
     * @memberof AppLocationSetting
     */
    serverConfig?: ServerConfig;
}

/**
 * Check if a given object implements the AppLocationSetting interface.
 */
export function instanceOfAppLocationSetting(value: object): value is AppLocationSetting {
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('name' in value) || value['name'] === undefined) return false;
    if (!('appId' in value) || value['appId'] === undefined) return false;
    if (!('serverConfigId' in value) || value['serverConfigId'] === undefined) return false;
    if (!('numInstances' in value) || value['numInstances'] === undefined) return false;
    if (!('autoScalerEnabled' in value) || value['autoScalerEnabled'] === undefined) return false;
    if (!('placement' in value) || value['placement'] === undefined) return false;
    return true;
}

export function AppLocationSettingFromJSON(json: any): AppLocationSetting {
    return AppLocationSettingFromJSONTyped(json, false);
}

export function AppLocationSettingFromJSONTyped(json: any, ignoreDiscriminator: boolean): AppLocationSetting {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'],
        'name': json['name'],
        'appId': json['appId'],
        'serverConfigId': json['serverConfigId'],
        'numInstances': json['numInstances'],
        'autoScalerEnabled': json['autoScalerEnabled'],
        'autoScalerMin': json['autoScalerMin'] == null ? undefined : json['autoScalerMin'],
        'autoScalerMax': json['autoScalerMax'] == null ? undefined : json['autoScalerMax'],
        'placement': PlacementFromJSON(json['placement']),
        'serverConfig': json['serverConfig'] == null ? undefined : ServerConfigFromJSON(json['serverConfig']),
    };
}

export function AppLocationSettingToJSON(value?: AppLocationSetting | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'id': value['id'],
        'name': value['name'],
        'appId': value['appId'],
        'serverConfigId': value['serverConfigId'],
        'numInstances': value['numInstances'],
        'autoScalerEnabled': value['autoScalerEnabled'],
        'autoScalerMin': value['autoScalerMin'],
        'autoScalerMax': value['autoScalerMax'],
        'placement': PlacementToJSON(value['placement']),
        'serverConfig': ServerConfigToJSON(value['serverConfig']),
    };
}

