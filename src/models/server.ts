/* tslint:disable */
/* eslint-disable */
/**
 * ODIN Fleet API
 * API to access Odin Fleet, empowering developers to deploy gameservers all around the world in just a few lines of code.
 *
 * The version of the OpenAPI document: 0.8.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { ServerConfig } from './server-config';
import {
    ServerConfigFromJSON,
    ServerConfigFromJSONTyped,
    ServerConfigToJSON,
} from './server-config';
import type { DockerTaskStatus } from './docker-task-status';
import {
    DockerTaskStatusFromJSON,
    DockerTaskStatusFromJSONTyped,
    DockerTaskStatusToJSON,
} from './docker-task-status';
import type { Backup } from './backup';
import {
    BackupFromJSON,
    BackupFromJSONTyped,
    BackupToJSON,
} from './backup';
import type { Port } from './port';
import {
    PortFromJSON,
    PortFromJSONTyped,
    PortToJSON,
} from './port';
import type { EnvironmentVariable } from './environment-variable';
import {
    EnvironmentVariableFromJSON,
    EnvironmentVariableFromJSONTyped,
    EnvironmentVariableToJSON,
} from './environment-variable';
import type { RestartPolicy } from './restart-policy';
import {
    RestartPolicyFromJSON,
    RestartPolicyFromJSONTyped,
    RestartPolicyToJSON,
} from './restart-policy';
import type { ResourceAllocations } from './resource-allocations';
import {
    ResourceAllocationsFromJSON,
    ResourceAllocationsFromJSONTyped,
    ResourceAllocationsToJSON,
} from './resource-allocations';
import type { Location } from './location';
import {
    LocationFromJSON,
    LocationFromJSONTyped,
    LocationToJSON,
} from './location';

/**
 * 
 * @export
 * @interface Server
 */
export interface Server {
    /**
     * The ID of the service
     * @type {number}
     * @memberof Server
     */
    id: number;
    /**
     * The ID of the location setting
     * @type {number}
     * @memberof Server
     */
    appLocationSettingId: number;
    /**
     * The ID of the instance
     * @type {number}
     * @memberof Server
     */
    instance: number;
    /**
     * 
     * @type {string}
     * @memberof Server
     */
    name: string;
    /**
     * The IP address of the node
     * @type {string}
     * @memberof Server
     */
    addr: string | null;
    /**
     * When the service was created
     * @type {Date}
     * @memberof Server
     */
    createdAt: Date;
    /**
     * When the service was last updated
     * @type {Date}
     * @memberof Server
     */
    updatedAt: Date;
    /**
     * The location of the node
     * @type {Location}
     * @memberof Server
     */
    location: Location;
    /**
     * The environment variables of the service
     * @type {{ [key: string]: EnvironmentVariable; }}
     * @memberof Server
     */
    env: { [key: string]: EnvironmentVariable; };
    /**
     * The port definitions of the service
     * @type {{ [key: string]: Port; }}
     * @memberof Server
     */
    ports: { [key: string]: Port; };
    /**
     * The restart policy of the service
     * @type {RestartPolicy}
     * @memberof Server
     */
    restartPolicy: RestartPolicy;
    /**
     * The resource allocations of the service
     * @type {ResourceAllocations}
     * @memberof Server
     */
    resources: ResourceAllocations;
    /**
     * The status of the task
     * @type {DockerTaskStatus}
     * @memberof Server
     */
    status: DockerTaskStatus;
    /**
     * The server configuration
     * @type {ServerConfig}
     * @memberof Server
     */
    serverConfig: ServerConfig;
    /**
     * The last backup of the service
     * @type {Backup}
     * @memberof Server
     */
    backup?: Backup;
}

/**
 * Check if a given object implements the Server interface.
 */
export function instanceOfServer(value: object): value is Server {
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('appLocationSettingId' in value) || value['appLocationSettingId'] === undefined) return false;
    if (!('instance' in value) || value['instance'] === undefined) return false;
    if (!('name' in value) || value['name'] === undefined) return false;
    if (!('addr' in value) || value['addr'] === undefined) return false;
    if (!('createdAt' in value) || value['createdAt'] === undefined) return false;
    if (!('updatedAt' in value) || value['updatedAt'] === undefined) return false;
    if (!('location' in value) || value['location'] === undefined) return false;
    if (!('env' in value) || value['env'] === undefined) return false;
    if (!('ports' in value) || value['ports'] === undefined) return false;
    if (!('restartPolicy' in value) || value['restartPolicy'] === undefined) return false;
    if (!('resources' in value) || value['resources'] === undefined) return false;
    if (!('status' in value) || value['status'] === undefined) return false;
    if (!('serverConfig' in value) || value['serverConfig'] === undefined) return false;
    return true;
}

export function ServerFromJSON(json: any): Server {
    return ServerFromJSONTyped(json, false);
}

export function ServerFromJSONTyped(json: any, ignoreDiscriminator: boolean): Server {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'],
        'appLocationSettingId': json['appLocationSettingId'],
        'instance': json['instance'],
        'name': json['name'],
        'addr': json['addr'],
        'createdAt': (new Date(json['createdAt'])),
        'updatedAt': (new Date(json['updatedAt'])),
        'location': LocationFromJSON(json['location']),
        'env': (mapValues(json['env'], EnvironmentVariableFromJSON)),
        'ports': (mapValues(json['ports'], PortFromJSON)),
        'restartPolicy': RestartPolicyFromJSON(json['restartPolicy']),
        'resources': ResourceAllocationsFromJSON(json['resources']),
        'status': DockerTaskStatusFromJSON(json['status']),
        'serverConfig': ServerConfigFromJSON(json['serverConfig']),
        'backup': json['backup'] == null ? undefined : BackupFromJSON(json['backup']),
    };
}

export function ServerToJSON(value?: Server | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'id': value['id'],
        'appLocationSettingId': value['appLocationSettingId'],
        'instance': value['instance'],
        'name': value['name'],
        'addr': value['addr'],
        'createdAt': ((value['createdAt']).toISOString()),
        'updatedAt': ((value['updatedAt']).toISOString()),
        'location': LocationToJSON(value['location']),
        'env': (mapValues(value['env'], EnvironmentVariableToJSON)),
        'ports': (mapValues(value['ports'], PortToJSON)),
        'restartPolicy': RestartPolicyToJSON(value['restartPolicy']),
        'resources': ResourceAllocationsToJSON(value['resources']),
        'status': DockerTaskStatusToJSON(value['status']),
        'serverConfig': ServerConfigToJSON(value['serverConfig']),
        'backup': BackupToJSON(value['backup']),
    };
}

