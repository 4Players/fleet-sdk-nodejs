/* tslint:disable */
/* eslint-disable */
/**
 * ODIN Fleet API
 * API to access Odin Fleet, empowering developers to deploy gameservers all around the world in just a few lines of code.
 *
 * The version of the OpenAPI document: 0.8.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { DockerRegistryType } from './docker-registry-type';
import {
    DockerRegistryTypeFromJSON,
    DockerRegistryTypeFromJSONTyped,
    DockerRegistryTypeToJSON,
} from './docker-registry-type';

/**
 * 
 * @export
 * @interface DockerRegistry
 */
export interface DockerRegistry {
    /**
     * The ID of the registry
     * @type {number}
     * @memberof DockerRegistry
     */
    id: number;
    /**
     * The type of the registry
     * @type {DockerRegistryType}
     * @memberof DockerRegistry
     */
    type: DockerRegistryType;
    /**
     * The name of the registry
     * @type {string}
     * @memberof DockerRegistry
     */
    name: string;
    /**
     * The username to use for authentication
     * @type {string}
     * @memberof DockerRegistry
     */
    username: string | null;
    /**
     * The password to use for authentication
     * @type {string}
     * @memberof DockerRegistry
     */
    password: string | null;
    /**
     * The URL of the registry
     * @type {string}
     * @memberof DockerRegistry
     */
    url: string;
    /**
     * The access token to use for authentication
     * @type {string}
     * @memberof DockerRegistry
     */
    accessToken: string | null;
    /**
     * The URL of the instance
     * @type {string}
     * @memberof DockerRegistry
     */
    instanceUrl: string | null;
}

/**
 * Check if a given object implements the DockerRegistry interface.
 */
export function instanceOfDockerRegistry(value: object): value is DockerRegistry {
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('type' in value) || value['type'] === undefined) return false;
    if (!('name' in value) || value['name'] === undefined) return false;
    if (!('username' in value) || value['username'] === undefined) return false;
    if (!('password' in value) || value['password'] === undefined) return false;
    if (!('url' in value) || value['url'] === undefined) return false;
    if (!('accessToken' in value) || value['accessToken'] === undefined) return false;
    if (!('instanceUrl' in value) || value['instanceUrl'] === undefined) return false;
    return true;
}

export function DockerRegistryFromJSON(json: any): DockerRegistry {
    return DockerRegistryFromJSONTyped(json, false);
}

export function DockerRegistryFromJSONTyped(json: any, ignoreDiscriminator: boolean): DockerRegistry {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'],
        'type': DockerRegistryTypeFromJSON(json['type']),
        'name': json['name'],
        'username': json['username'],
        'password': json['password'],
        'url': json['url'],
        'accessToken': json['accessToken'],
        'instanceUrl': json['instanceUrl'],
    };
}

export function DockerRegistryToJSON(value?: DockerRegistry | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'id': value['id'],
        'type': DockerRegistryTypeToJSON(value['type']),
        'name': value['name'],
        'username': value['username'],
        'password': value['password'],
        'url': value['url'],
        'accessToken': value['accessToken'],
        'instanceUrl': value['instanceUrl'],
    };
}

