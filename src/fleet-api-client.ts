import {FleetApi} from "./apis";
import {Configuration, ConfigurationParameters, DefaultConfig} from "./runtime";
import {
  App,
  Binary,
  OperatingSystem,
  BinaryType,
  ServerConfig,
  CreateServerConfigRequest,
  Location,
  AppLocationSetting,
  Server,
  type UpdateAppLocationSettingRequest,
  type CreateAppLocationSettingRequest,
  CreateBinaryRequest, DockerRegistry
} from "./models";

/**
 * FleetApiClient is the primary interface for interacting with the ODIN Fleet API in NodeJS. It implements the OpenAPI generated client FleetApi and wraps it with additional functionality.
 * The basic usage id is to create an instance with the access token you'll find in the Dashboard (https://console.4players.io) and then select an app ID that will be used in subsequent calls.
 * You'll find the app ID in the dashboard, but you can also use the getApps() method to list all apps.
 */
export class FleetApiClient {

  /**
   * Represents the auto-generated FleetApi client.
   * This class provides methods to interact with the FleetApi service.
   */
  private _client: FleetApi;

  /**
   * Represents the currently selected app ID.
   */
  private _selectedAppId: number = 0;

  /**
   * Constructs a new instance of the class.
   *
   * @param {string} accessToken - The access token used for authorization.
   * @param {object} [configuration] - The optional configuration object.
   */
  constructor(accessToken: string, protected configuration = DefaultConfig) {

    // This needs to be set as the OpenAPI Generator doesn't support the Authorization header
    var headers = {
      Authorization: `Bearer ${accessToken}`,
    }

    // Setup the configuration
    var configParams = {
      basePath: configuration.basePath,
      headers: {...configuration.headers, ...headers},
      fetchApi: configuration.fetchApi,
      middleware: configuration.middleware,
      username: configuration.username,
      password: configuration.password,
      apiKey: configuration.apiKey,
      accessToken: configuration.accessToken,
      credentials: configuration.credentials,
    } as ConfigurationParameters;

    var config = new Configuration(configParams);

    this._client = new FleetApi(config);
  }

  /**
   * Sets the selected app ID. It will be used for subsequent calls (which always require an app ID). If you don't provide an app ID in subsequent method calls, the selected app ID will be used.
   * @param {number} appId - The ID of the app to be selected.
   */
  selectAppId(appId: number) {
    this._selectedAppId = appId;
  }

  /**
   * Retrieves the selected application ID.
   *
   * @returns {number} The selected application ID.
   */
  get selectedAppId(): number {
    return this._selectedAppId;
  }

  /**
   * Retrieves the FleetApi client object that is auto-generated by the OpenAPI Generator.
   *
   * @returns {FleetApi} The FleetApi client object.
   */
  get client(): FleetApi {
    return this._client;
  }

  /**
   * Creates a new app with the given name.
   *
   * @param {string} name - The name of the app to be created.
   * @returns {Promise<App>} A promise that resolves with the created app.
   */
  async createApp(name: string): Promise<App> {
    return this.client.createApp({createAppRequest: {name}});
  }

  /**
   * Asynchronously retrieves the list of apps.
   *
   * @returns {Promise<Array<App>>} A promise that resolves with an array of App objects representing the apps.
   */
  async getApps(): Promise<Array<App>> {
    return this.client.getApps();
  }

  /**
   * Retrieves an app by its ID.
   *
   * @param {number} appId - The ID of the app to retrieve.
   * @return {Promise<App>} - A Promise that resolves to the retrieved app.
   */
  async getApp(appId: number): Promise<App> {
    return this.client.getAppById({app: appId});
  }

  /**
   * Retrieves the app ID.
   * If appId is provided, returns the appId.
   * If no appId is provided, returns the selectedAppId.
   * Throws an error if no app is selected.
   *
   * @param {number} appId - (optional) The app ID.
   * @returns {number} - The app ID.
   * @throws {Error} - Throws an error if no app is selected.
   */
  private getAppId(appId?: number): number {
    if (appId) {
      return appId;
    }
    if (this.selectedAppId === 0) {
      throw new Error("No app selected. Use selectAppId() to select an app.");
    }
    return this.selectedAppId;
  }

  /**
   * Retrieves the binaries for an application.
   *
   * @param {number} [appId] - The ID of the application, if not provided, the selected app ID will be used.
   * @return {Promise<Array<Binary>>} - A promise that resolves with an array of Binary objects.
   */
  async getBinaries(appId?: number): Promise<Array<Binary>> {
    return this.client.getBinaries({app: this.getAppId(appId)});
  }

  /**
   * Create a binary.
   *
   * @param {string} name - The name of the binary.
   * @param {string} version - The version of the binary.
   * @param {BinaryType} type - The type of the binary.
   * @param {OperatingSystem} os - The operating system of the binary.
   * @param {number} [appId] - Optional app ID to associate with the binary, if not provided, the selected app ID will be used.
   * @returns {Promise<Binary>} - The created binary.
   */
  async createBinary(name: string, version: string, type: BinaryType, os: OperatingSystem, appId?: number): Promise<Binary> {
    return this.client.createBinary({app: this.getAppId(appId), createBinaryRequest: {name, version, type, os}});
  }

  /**
   * Deletes a binary item.
   *
   * @param {number} binaryId - The ID of the binary item to be deleted.
   * @return {Promise<void>} A Promise that resolves when the binary item is successfully deleted.
   */
  async deleteBinary(binaryId: number): Promise<void> {
    return this.client.deleteBinary({binary: binaryId});
  }


  /**
   * Updates a binary with the given ID using the provided payload.
   *
   * @param {number} binaryId - The ID of the binary to update.
   * @param {CreateBinaryRequest} payload - The payload containing the updated information for the binary.
   * @returns {Promise<Binary>} A promise that resolves with the updated binary object.
   */
  async updateBinary(binaryId: number, payload: CreateBinaryRequest): Promise<Binary> {
    return this.client.updateBinary({binary: binaryId, createBinaryRequest: payload});
  }

  /**
   * Retrieves server configurations for a specified app or the default app if no app ID is provided.
   *
   * @param {number} [appId] - Optional app ID.
   * @returns {Promise<Array<ServerConfig>>} - A promise that resolves to an array of server configurations.
   */
  async getServerConfigs(appId?: number): Promise<Array<ServerConfig>> {
    return this.client.getServerConfigs({app: this.getAppId(appId)});
  }

  /**
   * Creates a server config.
   *
   * @param {CreateServerConfigRequest} definition - The server config definition.
   * @param {number} [appId] - The optional application ID.
   * @returns {Promise<ServerConfig>} - A promise that resolves to the created server config.
   */
  async createServerConfig(definition: CreateServerConfigRequest, appId?: number): Promise<ServerConfig> {
    return this.client.createServerConfig({app: this.getAppId(appId), createServerConfigRequest: definition});
  }

  /**
   * Deletes a server configuration.
   *
   * @param {number} serverConfigId - The ID of the server configuration to delete.
   * @returns {Promise<void>} - A promise that resolves with no result upon successful deletion.
   */
  async deleteServerConfig(serverConfigId: number): Promise<void> {
    return this.client.deleteServerConfig({serverConfig: serverConfigId});
  }

  /**
   * Update the server configuration with the given ID using the provided definition.
   *
   * @param {number} serverConfigId - The ID of the server configuration to update.
   * @param {CreateServerConfigRequest} definition - The definition containing the updated server configuration data.
   *
   * @return {Promise<ServerConfig>} - A promise that resolves to the updated server configuration.
   */
  async updateServerConfig(serverConfigId: number, definition: CreateServerConfigRequest): Promise<ServerConfig> {
    return this.client.updateServerConfig({serverConfig: serverConfigId, createServerConfigRequest: definition});
  }

  /**
   * Retrieves an array of locations available for deployment.
   *
   * @returns {Promise<Array<Location>>} A promise that resolves to an array of Location objects.
   */
  async getLocations(): Promise<Array<Location>> {
    return this.client.getLocations();
  }

  /**
   * Retrieves the deployments for an application.
   *
   * @param {number} [appId] - The ID of the application. If not provided, uses the default application ID.
   * @returns {Promise<Array<AppLocationSetting>>} - A promise that resolves with an array of deployment settings for the application.
   */
  async getDeployments(appId?: number): Promise<Array<AppLocationSetting>> {
    return this.client.getAppLocationSettings({app: this.getAppId(appId)});
  }

  /**
   * Creates a deployment for an application.
   *
   * @param {CreateAppLocationSettingRequest} definition - The definition for creating the app location setting.
   * @param {number} [appId] - The ID of the app. Optional if already set in the client instance.
   * @return {Promise<AppLocationSetting>} - A promise that resolves to the created app location setting.
   */
  async createDeployment(definition: CreateAppLocationSettingRequest, appId?: number): Promise<AppLocationSetting> {
    return this.client.createAppLocationSetting({app: this.getAppId(appId), createAppLocationSettingRequest: definition});
  }

  /**
   * Deletes a deployment by its ID.
   *
   * @param {number} deploymentId - The ID of the deployment to delete.
   * @returns {Promise<void>} Resolves when the deletion is successful.
   */
  async deleteDeployment(deploymentId: number): Promise<void> {
    return this.client.deleteAppLocationSetting({appLocationSetting: deploymentId});
  }

  /**
   * Updates the deployment with the specified deployment ID using the provided definition
   * @param {number} deploymentId - The ID of the deployment to update
   * @param {UpdateAppLocationSettingRequest} definition - The new app location setting definition
   * @return {Promise<AppLocationSetting>} - A promise that resolves to the updated app location setting object
   */
  async updateDeployment(deploymentId: number, definition: UpdateAppLocationSettingRequest): Promise<AppLocationSetting> {
    return this.client.updateAppLocationSetting({appLocationSetting: deploymentId, updateAppLocationSettingRequest: definition});
  }

  /**
   * Retrieves a list of servers for a given application ID.
   *
   * @param {number} [appId] - The ID of the application. Optional, defaults to null.
   * @returns {Promise<Array<Server>>} - A Promise resolving to an array of Server objects.
   */
  async getServers(appId?: number): Promise<Array<Server>> {
    return this.client.getServers({app: this.getAppId(appId)});
  }

  /**
   * Retrieves a server by its ID.
   *
   * @param {number} serverId - The ID of the server to retrieve.
   * @param {number=} appId - The optional ID of the application.
   * @returns {Promise<Server>} A promise that resolves to the server object.
   */
  async getServer(serverId: number, appId?: number): Promise<Server> {
    return this.client.getServerById({app: this.getAppId(appId), service: serverId});
  }

  /**
   * Restarts the specified server asynchronously.
   *
   * @param {number} serverId - The ID of the server to restart.
   * @returns {Promise<void>} - A promise that resolves when the server is successfully restarted.
   */
  async restartServer(serverId: number): Promise<void> {
    return this.client.restartServer({service: serverId});
  }

  /**
   * Creates a backup for a server. The server will be stopped, the persistent data will be copied, and the server will be started again.
   *
   * @param {number} serverId - The ID of the server.
   * @return {Promise<void>} A promise that resolves when the backup is created.
   */
  async createBackup(serverId: number): Promise<void> {
    return this.client.createBackup({service: serverId});
  }

  /**
   * Restores a backup for a specified server. The server will be stopped, the persistent data will be replaced with the backup, and the server will be started again.
   *
   * @param {number} serverId - The ID of the server to restore the backup for.
   *
   * @return {Promise<void>} A promise that resolves when the backup is successfully restored.
   */
  async restoreBackup(serverId: number): Promise<void> {
    return this.client.restoreBackup({service: serverId});
  }

  /**
   * Retrieves a list of Docker Registries from the client.
   * @returns {Promise<Array<DockerRegistry>>} - A promise that resolves to an array of DockerRegistry objects.
   */
  async getDockerRegistries(): Promise<Array<DockerRegistry>> {
    return this.client.getDockerRegistries();
  }
}
