/* tslint:disable */
/* eslint-disable */
/**
 * ODIN Fleet API
 * API to access Odin Fleet, empowering developers to deploy gameservers all around the world in just a few lines of code.
 *
 * The version of the OpenAPI document: 0.8.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { DockerRegistryType } from './docker-registry-type';
import {
    DockerRegistryTypeFromJSON,
    DockerRegistryTypeFromJSONTyped,
    DockerRegistryTypeToJSON,
} from './docker-registry-type';

/**
 * 
 * @export
 * @interface CreateDockerRegistryRequest
 */
export interface CreateDockerRegistryRequest {
    /**
     * The type of the docker registry
     * @type {DockerRegistryType}
     * @memberof CreateDockerRegistryRequest
     */
    type: DockerRegistryType;
    /**
     * The name of the docker registry
     * @type {string}
     * @memberof CreateDockerRegistryRequest
     */
    name: string;
    /**
     * The URL of the docker registry
     * @type {string}
     * @memberof CreateDockerRegistryRequest
     */
    url?: string | null;
    /**
     * The URL of the gitlab instance
     * @type {string}
     * @memberof CreateDockerRegistryRequest
     */
    instanceUrl?: string | null;
    /**
     * The username to use for authentication
     * @type {string}
     * @memberof CreateDockerRegistryRequest
     */
    username?: string | null;
    /**
     * The access token to use for authentication
     * @type {string}
     * @memberof CreateDockerRegistryRequest
     */
    accessToken?: string | null;
    /**
     * The password to use for authentication
     * @type {string}
     * @memberof CreateDockerRegistryRequest
     */
    password?: string | null;
}

/**
 * Check if a given object implements the CreateDockerRegistryRequest interface.
 */
export function instanceOfCreateDockerRegistryRequest(value: object): value is CreateDockerRegistryRequest {
    if (!('type' in value) || value['type'] === undefined) return false;
    if (!('name' in value) || value['name'] === undefined) return false;
    return true;
}

export function CreateDockerRegistryRequestFromJSON(json: any): CreateDockerRegistryRequest {
    return CreateDockerRegistryRequestFromJSONTyped(json, false);
}

export function CreateDockerRegistryRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): CreateDockerRegistryRequest {
    if (json == null) {
        return json;
    }
    return {
        
        'type': DockerRegistryTypeFromJSON(json['type']),
        'name': json['name'],
        'url': json['url'] == null ? undefined : json['url'],
        'instanceUrl': json['instanceUrl'] == null ? undefined : json['instanceUrl'],
        'username': json['username'] == null ? undefined : json['username'],
        'accessToken': json['accessToken'] == null ? undefined : json['accessToken'],
        'password': json['password'] == null ? undefined : json['password'],
    };
}

export function CreateDockerRegistryRequestToJSON(value?: CreateDockerRegistryRequest | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'type': DockerRegistryTypeToJSON(value['type']),
        'name': value['name'],
        'url': value['url'],
        'instanceUrl': value['instanceUrl'],
        'username': value['username'],
        'accessToken': value['accessToken'],
        'password': value['password'],
    };
}

